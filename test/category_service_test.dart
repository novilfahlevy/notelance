import 'dart:convert';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:notelance/models/category.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

import 'category_service_test.mocks.dart'; // Mock file generated by mockito

// The function we are testing, copied from the user's request
Future<void> _saveNewCategoryInRemoteDatabase(Category newCategory) async {
  try {
    final FunctionResponse response = await Supabase.instance.client.functions.invoke(
      '${dotenv.env['SUPABASE_FUNCTION_NAME']!}/categories',
      method: HttpMethod.post,
      body: newCategory.toJson(),
    );

    if (response.status != 200 && response.status != 201) {
      // Decode the response body to extract the specific error message
      final serverError = json.decode(response.data);
      throw Exception('Supabase function failed with status: ${response.status}. Error: ${serverError['error'] ?? response.data}');
    }

    if (response.data != null && response.data['error'] != null) {
      throw Exception('Server error: ${response.data['error']}');
    }
  } on Exception {
    rethrow;
  }
}

// Generate the mock class for FunctionsClient
@GenerateMocks([FunctionsClient, SupabaseClient])
void main() {
  late MockFunctionsClient mockFunctionsClient;
  late MockSupabaseClient mockSupabaseClient;

  // Set up the mock client before each test
  setUp(() {
    mockFunctionsClient = MockFunctionsClient();
    mockSupabaseClient = MockSupabaseClient();

    // The correct way to mock the Supabase singleton for testing is to mock its
    // internal dependencies, not the singleton itself.
    // The function under test uses `Supabase.instance.client.functions.invoke`.
    // We will stub the mock client to return the mock functions client.
    when(mockSupabaseClient.functions).thenReturn(mockFunctionsClient);

    // This is the key change: We use `TestWidgetsFlutterBinding.ensureInitialized()`
    // to set up the environment and then we mock the Supabase.instance.client getter.
    // This is a common and reliable pattern for testing with singletons.
    // Note: The `Supabase.initialize` method internally calls a method that
    // requires the Flutter binding to be initialized, so we must add the
    // `flutter_test` dependency and call this function.
    // This will prevent issues with platform channels in unit tests.
    TestWidgetsFlutterBinding.ensureInitialized();
    when(Supabase.instance.client).thenReturn(mockSupabaseClient);
  });

  group('_saveNewCategoryInRemoteDatabase', () {
    // Test case for successful creation (HTTP 201)
    test('should not throw an exception on successful category creation (201)', () async {
      // Arrange
      final newCategory = Category(name: 'Test Category');
      final successResponse = FunctionResponse(
        status: 201,
        data: {
          'message': 'CATEGORY_CREATED_SUCCESSFULLY',
          'category': {'name': 'Test Category', 'order_index': 1},
        },
      );
      when(mockFunctionsClient.invoke(
        any,
        method: anyNamed('method'),
        body: anyNamed('body'),
      )).thenAnswer((_) async => successResponse);

      // Act & Assert
      await expectLater(() => _saveNewCategoryInRemoteDatabase(newCategory), returnsNormally);
    });

    // Test case for missing required field (HTTP 400)
    test('should throw an exception for missing required name field (400)', () async {
      // Arrange
      final newCategory = Category(name: '');
      final badRequestResponse = FunctionResponse(
        status: 400,
        data: {'error': 'Missing required field: name'},
      );
      when(mockFunctionsClient.invoke(
        any,
        method: anyNamed('method'),
        body: anyNamed('body'),
      )).thenAnswer((_) async => badRequestResponse);

      // Act & Assert
      await expectLater(
            () => _saveNewCategoryInRemoteDatabase(newCategory),
        throwsA(isA<Exception>().having(
              (e) => e.toString(),
          'message',
          contains('Supabase function failed with status: 400. Error: Missing required field: name'),
        )),
      );
    });

    // Test case for a duplicate category (HTTP 409)
    test('should throw an exception when category with same name already exists (409)', () async {
      // Arrange
      final newCategory = Category(name: 'Existing Category');
      final conflictResponse = FunctionResponse(
        status: 409,
        data: {'error': 'Category with this name already exists', 'existing_category': {'name': 'Existing Category', 'id': 'uuid'}},
      );
      when(mockFunctionsClient.invoke(
        any,
        method: anyNamed('method'),
        body: anyNamed('body'),
      )).thenAnswer((_) async => conflictResponse);

      // Act & Assert
      await expectLater(
            () => _saveNewCategoryInRemoteDatabase(newCategory),
        throwsA(isA<Exception>().having(
              (e) => e.toString(),
          'message',
          contains('Supabase function failed with status: 409. Error: Category with this name already exists'),
        )),
      );
    });

    // Test case for a server-side error (HTTP 500) during category insertion
    test('should throw an exception for a 500 server error during insertion', () async {
      // Arrange
      final newCategory = Category(name: 'Failing Category');
      final serverErrorResponse = FunctionResponse(
        status: 500,
        data: {'error': 'Failed to create category', 'details': 'Database error occurred'},
      );
      when(mockFunctionsClient.invoke(
        any,
        method: anyNamed('method'),
        body: anyNamed('body'),
      )).thenAnswer((_) async => serverErrorResponse);

      // Act & Assert
      await expectLater(
            () => _saveNewCategoryInRemoteDatabase(newCategory),
        throwsA(isA<Exception>().having(
              (e) => e.toString(),
          'message',
          contains('Supabase function failed with status: 500. Error: Failed to create category'),
        )),
      );
    });
  });
}
